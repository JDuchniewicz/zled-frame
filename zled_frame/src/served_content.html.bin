HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8

<!DOCTYPE html>
<html>
<head>
<title>Z LED Frame Dashboard</title>
<style>
body {
  background-color: #f3f5f6;
  font-family: "sans-serif";
  margin: 0;
  padding: 0;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

input[type="file"] {
  margin-bottom: 10px;
}

button {
  padding: 10px 20px;
  margin-right: 10px;
  background-color: #4CAF50;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #45a049;
}

.preview-container {
  display: flex;
  justify-content: space-between;
}

.preview {
  width: 45%;
  margin-top: 20px;
  padding: 10px;
  background-color: #fff;
  border: 1px solid #ddd;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.preview h2 {
  margin-top: 0;
  font-size: 18px;
  color: #333;
}
</style>
</head>

<body>

<div class="container">
  <input type="file" id="fileInput">
  <button onclick="processImage()">Convert</button>
  <button onclick="uploadProcessedData()">Upload</button>

  <div class="preview-container">
    <div class="preview" id="originalPreview">
      <h2>Original Image</h2>
      <img id="originalImage" src="#" alt="Original Image" width="100%">
    </div>
    <div class="preview" id="convertedPreview">
      <h2>Converted Image</h2>
      <img id="convertedImage" src="#" alt="Converted Image" width="100%">
    </div>
  </div>
</div>

<script>
let processedImage;

function processImage() {
  var fileInput = document.getElementById('fileInput');

  // Check if a file is selected
  if (fileInput.files.length > 0) {
    var file = fileInput.files[0];

    // Read the file as a data URL
    var reader = new FileReader();
    reader.onload = function(event) {
      var dataURL = event.target.result;

      // Display the original image preview
      var originalPreview = document.getElementById('originalPreview');
      originalPreview.innerHTML = '<img src="' + dataURL + '" width="200" alt="Original Image"/>';

      // Create an image element
      var image = new Image();
      image.onload = function() {
        // Create a canvas element
        var canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;
        var ctx = canvas.getContext('2d');

        // Draw the image onto the canvas (resizing it to 16x16)
        ctx.drawImage(image, 0, 0, 16, 16);

        // Get the pixel data from the canvas
        var imageData = ctx.getImageData(0, 0, 16, 16);
        var pixelData = imageData.data;

        // Create a Uint8Array to store the raw binary data
        var binaryData = new Uint8Array(16 * 16 * 3);
        for (var i = 0; i < pixelData.length; i += 4) {
          binaryData[i] = pixelData[i];           // Red
          binaryData[i + 1] = pixelData[i + 1];   // Green
          binaryData[i + 2] = pixelData[i + 2];   // Blue
        }

        processedImage = binaryData;

        // Display the converted image preview
        var convertedPreview = document.getElementById('convertedPreview');
        convertedPreview.innerHTML = '<img src="' + canvas.toDataURL() + '" width="200" alt="Converted Image"/>';

        // Log the binary data to the console
        console.log('Binary Data:', binaryData);
      };

      // Set the image source to the data URL
      image.src = dataURL;
    };

    // Read the file as a data URL
    reader.readAsDataURL(file);
  } else {
    alert("Please select a file before processing.");
  }
}

function uploadProcessedData() {
  // Create a new Uint8Array to hold the combined data
  var combinedArray = new Uint8Array(processedImage.length + 8); // 8 bytes for the "BADAB00D" string

  // Set the first 8 bytes to the "BADAB00D" string
  var magicHeader = new TextEncoder().encode("BADAB00D");
  combinedArray.set(magicHeader, 0);

  // Set the remaining bytes to the processed image data
  combinedArray.set(processedImage, 8);

  // Create a binary blob from the combined data
  var blob = new Blob([combinedArray]);

  console.log('Sending image + magic:', combinedArray);

  // Add your server endpoint URL here
  var endpointUrl = '/api/image';

  // Upload data to server
  fetch(endpointUrl, {
    method: 'POST',
    body: blob,
    headers: {
      'Content-Type': 'application/octet-stream' // Specify the content type as binary
    }
  })
  .then(response => response.json())
  .then(data => {
    // Handle server response if needed
    console.log('Server response:', data);
  })
  .catch(error => {
    console.error('Error:', error);
  });
}
</script>

</body>
</html>
