HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8

<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: #f3f5f6;
  font-family: "sans-serif";
}
.preview-container {
  display: flex;
  justify-content: space-between;
}
.preview {
  width: 200px;
  height: auto;
}
</style>
</head>

<body>

<p style="color: red">
Warning: this is a content sample. Proceed to
<a href="https://www.zephyrproject.org/about/what-is-zephyr-project">Zephyr About page</a>
for up to date information.
</p>

<h1>What is Zephyr™ Project?</h1>

<table width="50%">
<tr><td>
<p>
The Zephyr™ Project, is a Linux Foundation hosted Collaboration Project, an open source collaborative effort uniting leaders from across the industry to build a best-in-breed small, scalable, real-time operating system (RTOS) optimized for resource constrained devices, across multiple architectures. The Zephyr Project’s goal is to establish a neutral project where silicon vendors, OEMs, ODMs, ISVs, and OSVs can contribute technology to reduce the cost and accelerate time to market for developing the billions of devices that will make up the majority of the Internet of Things
</p>

<p>
The Zephyr Project is perfect for building simple connected sensors, LED wearables, up to modems and small IoT wireless gateways. Because the Zephyr OS is modular and supports multiple architectures, developers are able to easily tailor an optimal solution to meet their needs. As a true open source project, the community can evolve the project to support new hardware, developer tools, sensor and device drivers. Enhancements in security, device management capabilities, connectivity stacks and file systems can be easily implemented.
</p>

<p>
The Zephyr kernel is derived from Wind River's commercial VxWorks Microkernel Profile for VxWorks. Microkernel Profile has evolved over 20 years from DSP RTOS technology known as Virtuoso. The RTOS has been used in several commercial applications including satellites, military command and control communications, radar, telecommunications and image processing. The most recent example of the technology’s success is the successful Philae Landing on Comet Churyumov–Gerasimenko and the accompanying Rosetta Orbiter.
</p>
</td></tr>

</table>

<input type="file" id="fileInput">
<button onclick="processImage()">Convert</button>
<button onclick="uploadProcessedData()">Upload</button>

<div class="preview-container">
  <div class="preview" id="originalPreview">Original Image Preview</div>
  <div class="preview" id="convertedPreview">Converted Image Preview</div>
</div>

<script>
let processedImage;

function processImage() {
  var fileInput = document.getElementById('fileInput');

  // Check if a file is selected
  if (fileInput.files.length > 0) {
    var file = fileInput.files[0];

    // Read the file as a data URL
    var reader = new FileReader();
    reader.onload = function(event) {
      var dataURL = event.target.result;

      // Display the original image preview
      var originalPreview = document.getElementById('originalPreview');
      originalPreview.innerHTML = '<img src="' + dataURL + '" width="200" alt="Original Image"/>';

      // Create an image element
      var image = new Image();
      image.onload = function() {
        // Create a canvas element
        var canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;
        var ctx = canvas.getContext('2d');

        // Draw the image onto the canvas (resizing it to 16x16)
        ctx.drawImage(image, 0, 0, 16, 16);

        // Get the pixel data from the canvas
        var imageData = ctx.getImageData(0, 0, 16, 16);
        var pixelData = imageData.data;

        // Create a Uint8Array to store the raw binary data
        var binaryData = new Uint8Array(16 * 16 * 3);
        for (var i = 0; i < pixelData.length; i += 4) {
          binaryData[i] = pixelData[i];           // Red
          binaryData[i + 1] = pixelData[i + 1];   // Green
          binaryData[i + 2] = pixelData[i + 2];   // Blue
        }

        processedImage = binaryData;

        // Display the converted image preview
        var convertedPreview = document.getElementById('convertedPreview');
        convertedPreview.innerHTML = '<img src="' + canvas.toDataURL() + '" width="200" alt="Converted Image"/>';

        // Log the binary data to the console
        console.log('Binary Data:', binaryData);
      };

      // Set the image source to the data URL
      image.src = dataURL;
    };

    // Read the file as a data URL
    reader.readAsDataURL(file);
  } else {
    alert("Please select a file before processing.");
  }
}

function uploadProcessedData() {
  // Create a binary blob from the raw binary data
  var blob = new Blob([processedImage]);

  // Create a FormData object
  var formData = new FormData();
  formData.append('file', blob, 'processed_image.png');

  // Add your server endpoint URL here
  var endpointUrl = '/api/image';

  // Upload data to server
  fetch(endpointUrl, {
    method: 'POST',
    body: formData,
  })
  .then(response => response.json())
  .then(data => {
    // Handle server response if needed
    console.log('Server response:', data);
  })
  .catch(error => {
    console.error('Error:', error);
  });
}
</script>

</body>
</html>
